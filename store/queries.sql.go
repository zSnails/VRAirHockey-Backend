// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package store

import (
	"context"
)

const createAuth = `-- name: CreateAuth :exec
INSERT INTO Auth (hash, player_id)
VALUES (?, ?)
`

type CreateAuthParams struct {
	Hash     string `json:"hash"`
	PlayerID int64  `json:"playerId"`
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) error {
	_, err := q.db.ExecContext(ctx, createAuth, arg.Hash, arg.PlayerID)
	return err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO Players (name, email)
VALUES (?, ?)
RETURNING id, email, name
`

type CreatePlayerParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Name, arg.Email)
	var i Player
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getAuth = `-- name: GetAuth :one
SELECT id, hash, player_id, player_email, "foreign" FROM Auth 
WHERE player_id = ?
LIMIT 1
`

func (q *Queries) GetAuth(ctx context.Context, playerID int64) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getAuth, playerID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.PlayerID,
		&i.PlayerEmail,
		&i.Foreign,
	)
	return i, err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, email, name FROM Players
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getPlayerByMail = `-- name: GetPlayerByMail :one
SELECT id, email, name FROM Players
WHERE email = ? LIMIT 1
`

func (q *Queries) GetPlayerByMail(ctx context.Context, email string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByMail, email)
	var i Player
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getPlayerScores = `-- name: GetPlayerScores :many
SELECT id, score, player_id FROM Scores
WHERE player_id = ?
ORDER BY score
`

func (q *Queries) GetPlayerScores(ctx context.Context, playerID int64) ([]Score, error) {
	rows, err := q.db.QueryContext(ctx, getPlayerScores, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(&i.ID, &i.Score, &i.PlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isRegistered = `-- name: IsRegistered :one
SELECT EXISTS(SELECT 1 FROM Players WHERE email = ?) AS player_registered
`

func (q *Queries) IsRegistered(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isRegistered, email)
	var player_registered int64
	err := row.Scan(&player_registered)
	return player_registered, err
}

const registerPlayerScore = `-- name: RegisterPlayerScore :one
INSERT INTO Scores (score, player_id)
VALUES (?, ?)
RETURNING id, score, player_id
`

type RegisterPlayerScoreParams struct {
	Score    int64 `json:"score"`
	PlayerID int64 `json:"playerId"`
}

func (q *Queries) RegisterPlayerScore(ctx context.Context, arg RegisterPlayerScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, registerPlayerScore, arg.Score, arg.PlayerID)
	var i Score
	err := row.Scan(&i.ID, &i.Score, &i.PlayerID)
	return i, err
}

const renamePlayer = `-- name: RenamePlayer :one
UPDATE Players
SET name = ?
WHERE id = ?
RETURNING id, email, name
`

type RenamePlayerParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) RenamePlayer(ctx context.Context, arg RenamePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, renamePlayer, arg.Name, arg.ID)
	var i Player
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}
